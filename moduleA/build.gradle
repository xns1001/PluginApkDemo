apply plugin: 'com.android.application'

ext {
    host = [:]
    host.path = "${rootProject.file("dist/host/host_app_release_201702231613.apk").absolutePath}"
}
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.xns.module.a"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }

    signingConfigs{
        config {
            keyAlias 'plugin_app'
            keyPassword '123456'
            storeFile rootProject.file('plugin_app_demo.keystore')
            storePassword '123456'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    aaptOptions {
        additionalParameters "-I", host.path, '--ACDD-resoure-id', '0x5e'
    }
}


dependencies {
    provided fileTree(include: ['*.jar'], dir: 'libs')
}


// 反射修改aapt文件路径 start
import java.lang.reflect.Method;
import com.android.sdklib.BuildToolInfo;

/**
 * 修改Aapt路径
 */
Task modifyAaptPathTask = task('modifyAaptPath') << {
    android.applicationVariants.all { variant ->
        BuildToolInfo buildToolInfo = variant.androidBuilder.getTargetInfo().getBuildTools()
        Method addMethod = BuildToolInfo.class.getDeclaredMethod("add", BuildToolInfo.PathId.class, File.class)
        addMethod.setAccessible(true)
        String newAaptPath = rootProject.file("dist/aapt/win/aapt.exe").absolutePath
        addMethod.invoke(buildToolInfo, BuildToolInfo.PathId.AAPT, new File(newAaptPath))
        println "[LOG] new aapt path = " + buildToolInfo.getPath(BuildToolInfo.PathId.AAPT)
    }
}

/**
 * 在preBuild task执行前修改aapt path
 */
preBuild.doFirst {
    modifyAaptPathTask.execute()
}

// 反射修改aapt文件路径 end